
// firestore.rules
  rules_version = '2';
  service cloud.firestore {
    match /databases/{database
    }/documents {
        // Function to check if user is authenticated
      function isAuthenticated() {
        return request.auth != null;
        }
        // Function to check if user is the owner of a document
      function isOwner(userId) {
        return isAuthenticated() && request.auth.uid == userId;
        }
        // Match all user documents
      match /users/{userId
        } {
            // Users can only read and write their own profile
        allow read, write: if isOwner(userId);
        
        // Allow creating user document for themselves
        allow create: if isAuthenticated() && request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['email', 'displayName', 'photoURL', 'createdAt', 'updatedAt', 'preferences'
            ]) &&
                       request.resource.data.email is string &&
                       request.resource.data.email == request.auth.token.email;
        }
        // Match all post documents
      match /posts/{postId
        } {
            // Only post owners can read their posts
        allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
        
        // Only post owners can create posts for themselves
        allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAny(['title', 'content', 'scheduledTime', 'platform', 'userId', 'status'
            ]) &&
                       request.resource.data.userId is string &&
                       request.resource.data.content is string &&
                       request.resource.data.scheduledTime is string &&
                       request.resource.data.platform in ['twitter', 'facebook', 'instagram', 'linkedin'
            ] &&
                       request.resource.data.status in ['draft', 'scheduled', 'published', 'failed'
            ];
        
        // Only post owners can update their posts
        allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid;
        
        // Only post owners can delete their posts
        allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
        }
        // Match all user preferences documents
      match /userPreferences/{userId
        } {
            // Users can only read and write their own preferences
        allow read, write: if isOwner(userId);
        }
        // Match all analytics documents
      match /analytics/{docId
        } {
            // Analytics are user-specific
        allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
        
        // Only owners can write their analytics
        allow write: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
        }
        // Default deny all rule
      match /{document=**
        } {
        allow read, write: if false;
        }
    }
}
// storage.rules
  rules_version = '2';
  service firebase.storage {
    match /b/{bucket
    }/o {
        // Function to check if user is authenticated
      function isAuthenticated() {
        return request.auth != null;
        }
        // Function to check file size (max 10MB)
      function isValidFileSize() {
        return request.resource.size <= 10 * 1024 * 1024;
        }
        // Function to check file type (for media uploads)
      function isValidContentType() {
        return request.resource.contentType.matches('image/.*') || 
               request.resource.contentType.matches('video/.*');
        }
        // Match user's media folder
      match /users/{userId
        }/media/{mediaId
        } {
            // Only allow users to access their own media
        allow read: if isAuthenticated() && 
                     request.auth.uid == userId;
        
        // Only allow users to upload to their own folder with valid media
        allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       isValidFileSize() &&
                       isValidContentType();
        
        // Only allow users to update their own media
        allow update: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       isValidFileSize() &&
                       isValidContentType();
        
        // Only allow users to delete their own media
        allow delete: if isAuthenticated() && 
                       request.auth.uid == userId;
        }
        // Match post attachments
      match /posts/{postId
        }/attachments/{fileName
        } {
            // Allow read if user owns the post
        allow read: if isAuthenticated();
        
        // Allow create if user is authenticated and file is valid
        allow create: if isAuthenticated() &&
                       isValidFileSize() &&
                       isValidContentType();
        
        // Allow update if user owns the post and file is valid
        allow update: if isAuthenticated() &&
                       isValidFileSize() &&
                       isValidContentType();
        
        // Allow delete if user owns the post
        allow delete: if isAuthenticated();
        }
        // Default deny all rule
      match /{allPaths=**
        } {
        allow read, write: if false;
        }
    }
}
// firestore.indexes.json
{
    "indexes": [
        {
            "collectionGroup": "posts",
            "queryScope": "COLLECTION",
            "fields": [
                {
                    "fieldPath": "userId",
                    "order": "ASCENDING"
                },
                {
                    "fieldPath": "scheduledTime",
                    "order": "ASCENDING"
                }
            ]
        },
        {
            "collectionGroup": "posts",
            "queryScope": "COLLECTION",
            "fields": [
                {
                    "fieldPath": "userId",
                    "order": "ASCENDING"
                },
                {
                    "fieldPath": "status",
                    "order": "ASCENDING"
                },
                {
                    "fieldPath": "scheduledTime",
                    "order": "ASCENDING"
                }
            ]
        },
        {
            "collectionGroup": "posts",
            "queryScope": "COLLECTION",
            "fields": [
                {
                    "fieldPath": "userId",
                    "order": "ASCENDING"
                },
                {
                    "fieldPath": "platform",
                    "order": "ASCENDING"
                },
                {
                    "fieldPath": "scheduledTime",
                    "order": "ASCENDING"
                }
            ]
        },
        {
            "collectionGroup": "analytics",
            "queryScope": "COLLECTION",
            "fields": [
                {
                    "fieldPath": "userId",
                    "order": "ASCENDING"
                },
                {
                    "fieldPath": "date",
                    "order": "DESCENDING"
                }
            ]
        }
    ],
    "fieldOverrides": []
}